cool.cp <- 62.76  # cooling CP (from CP model)
#setpoint <- 76  # cooling setpoint (assumption)
#oa.temp
# Cooling Coefficient
cool.coef <- ((((u.value * area) + (volume * air.chg * rho * cp)) / 1000) * 0.556) * (30*24)
# convert from watts to kw, = kwh per F (multiply by 0.556)
# Cooling Efficiency
cool.eff <- cool.coef / cool.slope
# Interal Loads
i.loads <- -cool.coef * (cool.cp - setpoint)
# Total Electricity
total.e <- ifelse(oa.temp - cool.cp > 0,
baseload + (cool.slope * (oa.temp - cool.cp)),
baseload) # E = expected kWh at Toa - CP MODEL EQUATIO
# Parameters
parameters <- c(u.value, area, volume, air.chg, rho, cp, cool.slope, cool.cp,
cool.eff, setpoint, baseload, oa.temp, total.e, i.loads)
# as.data.frame(parameters)
names(parameters) <- c('u-value', 'surface area', 'volume', 'air changes', 'density of air',
'specific heat of air', 'cooling slope', 'cooling change-point',
'cooling efficiency', 'setpoint', 'baseload', 'outdoor air temp.',
'total electricity', 'internal loads')
# Return
return(
cat("Expected kWh at Toa:", total.e,
"\nCooling Coefficient:", cool.coef,
"\nCooling Efficiency:", cool.eff,
"\nInternal Loads:", i.loads,
"\nParameters\n",
parameters
))
}
bldg.sim(80, 76, 1.5, 1)
bldg.sim(50, 76, 1.5, 1)
citiation(ggplot2)
citation(ggplot2)
citation("ggplot2")
fuel.changepoints[2,1]
citiation("changepoint")
citation("changepoint")
x<-citation("changepoint"); toBibtex(x)
bldg.sim <- function(oa.temp, setpoint, u.value, air.chg) {
# Assumptions
baseload <- 25200
#u.value <- 1.5  # watts per sq. meter/K building envelope conductance  SI
area <- 7500  # sq. meter envelope area  SI
volume <- 37800  # cubic meter volume (conditioned space) (assumption) SI
#air.chg <- 1  # air change per hr.
rho <- 1.2  # kg/m cubed density of air  SI
cp <- 0.27  # watt hrs./cubic meter in K specific heat of air  SI
cool.slope <- 2695  # cooling slope (from lm)
cool.cp <- 62.76  # cooling CP (from CP model)
#setpoint <- 76  # cooling setpoint (assumption)
#oa.temp
# Cooling Coefficient
cool.coef <- ((((u.value * area) + (volume * air.chg * rho * cp)) / 1000) * 0.556) * (30*24)
# convert from watts to kw, = kwh per F (multiply by 0.556)
# Cooling Efficiency
cool.eff <- cool.coef / cool.slope
# Interal Loads
i.loads <- -cool.coef * (cool.cp - setpoint)
# Total Electricity
total.e <- ifelse(oa.temp - cool.cp > 0,
baseload + (cool.slope * (oa.temp - cool.cp)),
baseload) # E = expected kWh at Toa - CP MODEL EQUATIO
# Parameters
parameters <- c(u.value, area, volume, air.chg, rho, cp, cool.slope, cool.cp,
cool.eff, setpoint, baseload, oa.temp, total.e, i.loads)
# as.data.frame(parameters)
names(parameters) <- c('u-value', 'surface area', 'volume', 'air changes', 'density of air',
'specific heat of air', 'cooling slope', 'cooling change-point',
'cooling efficiency', 'setpoint', 'baseload', 'outdoor air temp.',
'total electricity', 'internal loads')
return(cbind(total.e, cool.coef, cool.eff, i.loads))
# Return
#return(
#cat("Expected kWh at Toa:", total.e,
#"\nCooling Coefficient:", cool.coef,
#"\nCooling Efficiency:", cool.eff,
#"\nInternal Loads:", i.loads,
#"\nParameters\n",
#parameters
#))
}
bldg.sim(50, 76, 1.5, 1)
sim.temps <- seq(from = 10, to = 100, by = 5)
temp.range.results <- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
```
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results
scipen(9999)
library(devtools)
scipen(9999)
scipen=999)
scipen=9990
scipen=9999
sim.temps <- seq(from = 10, to = 100, by = 5)
temp.range.results <- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results
temp.range.results <- rbind(sim.temps, temp.range.results)
temp.range.results
sim.temps
temp.range.results <- rbind(seq(10, 100, 5), temp.range.results)
temp.range.results
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results
scipen=9999
sim.temps <- seq(from = 10, to = 100, by = 5)
temp.range.results <- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results <- cbind(seq(10, 100, 5), temp.range.results)
temp.range.results
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results <- cbind(sim.temps as "Temp.", temp.range.results)
temp.range.results <- cbind(sim.temps AS "Temp.", temp.range.results)
temp.range.results <- cbind(sim.temps, temp.range.results)
temp.range.results
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results <- cbind(sim.temps, temp.range.results)
temp.range.results
library(devtools)
scipen=9999
sim.temps <- seq(from = 10, to = 100, by = 5)
temp.range.results <- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results <- cbind(sim.temps, temp.range.results)
temp.range.results
library(devtools)
scipen=9999
sim.temps <- seq(from = 10, to = 100, by = 5)
temp.range.results <- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results <- cbind(sim.temps, temp.range.results)
print(temp.range.results)
library(devtools)
scipen=9999
sim.Tset <- seq(from = 50, to = 75, by = 5)
Tset.range.results <- lapply(sim.Tset, FUN = bldg.sim, oa.temp = 76, u.value = 1.5, air.chg = 1)
Tset.range.results <- as.data.frame(do.call(rbind, Tset.range.results))
Tset.range.results
temp.range.results <- cbind(sim.Tset, temp.range.results)
print(temp.range.results)
- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- lapply(sim.temps, FUN = bldg.sim,  setpoint = 76, u.value = 1.5, air.chg = 1)
temp.range.results <- as.data.frame(do.call(rbind, temp.range.results))
temp.range.results <- cbind(sim.temps, temp.range.results)
print(temp.range.results)
sim.Tset <- seq(from = 50, to = 75, by = 5)
Tset.range.results <- lapply(sim.Tset, FUN = bldg.sim, oa.temp = 76, u.value = 1.5, air.chg = 1)
Tset.range.results <- as.data.frame(do.call(rbind, Tset.range.results))
Tset.range.results <- cbind(sim.Tset, temp.range.results)
print(Tset.range.results)
print(Tset.range.results, oa.temp)
Tset.range.results <- cbind(oa.temp, temp.range.results)
sim.Tset <- seq(from = 50, to = 75, by = 5)
Tset.range.results <- lapply(sim.Tset, FUN = bldg.sim, oa.temp = 76, u.value = 1.5, air.chg = 1)
Tset.range.results
Tset.range.results <- as.data.frame(do.call(rbind, Tset.range.results))
Tset.range.results
library(devtools)
scipen=9999
sim.Tset <- seq(from = 50, to = 75, by = 5)
Tset.range.results <- lapply(sim.Tset, FUN = bldg.sim, oa.temp = 76, u.value = 1.5, air.chg = 1)
Tset.range.results <- as.data.frame(do.call(rbind, Tset.range.results))
Tset.range.results <- cbind(sim.Tset, Tset.range.results)
print(Tset.range.results)
sim.insulation <- seq(from = 0.09, to = 0.25, by = 0.1)
insulation.range.results <- lapply(sim.insulation, FUN = bldg.sim, oa.temp = 76, setpoint = 76, air.chg = 1)
insulation.range.results <- as.data.frame(do.call(rbind, insulation.range.results))
print(insulation.range.results)
insulation.range.results <- cbind(sim.insulation, insulation.range.results)
print(insulation.range.results)
sim.insulation <- seq(from = 0.09, to = 0.25, by = 0.05)
insulation.range.results <- lapply(sim.insulation, FUN = bldg.sim, oa.temp = 76, setpoint = 76, air.chg = 1)
insulation.range.results <- as.data.frame(do.call(rbind, insulation.range.results))
insulation.range.results <- cbind(sim.insulation, insulation.range.results)
print(insulation.range.results)
```
summary(insulation.range.results)
sim.insulation <- seq(from = 0.5, to = 2, by = 0.1)
insulation.range.results <- lapply(sim.insulation, FUN = bldg.sim, oa.temp = 76, setpoint = 76, air.chg = 1)
insulation.range.results <- as.data.frame(do.call(rbind, insulation.range.results))
insulation.range.results <- cbind(sim.insulation, insulation.range.results)
print(insulation.range.results)
sim.V <- seq(from = 1, to = 3, by = 0.5)
V.range.results <- lapply(sim.V, FUN = bldg.sim,  oa.temp = 76, setpoint = 76, u.value = 1.5)
V.range.results <- as.data.frame(do.call(rbind, V.range.results))
V.range.results
sim.V <- seq(from = 1, to = 3, by = 0.5)
V.range.results <- lapply(sim.V, FUN = bldg.sim,  oa.temp = 76, setpoint = 76, u.value = 1.5)
V.range.results <- as.data.frame(do.call(rbind, V.range.results))
V.range.results <- cbind(sim.V, V.range.results)
print(V.range.results)
# Function: CP Model Equation
get.E <- function(baseload, cooling.slope, oa.temp, cooling.cp) {
total.elec <- baseload + (cooling.slope * (oa.temp - cooling.cp))
return(total.elec)
}
get.E(25200, 2695, 80, 62.76)
install.packages("proxy")
install.packages("proxy")
df0 <- as.data.frame.matrix(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
print df0
print(df0)
df0[df0 == w] -> 5
df0[df0 == "d"] <- 4
df0[df0 == w] -> 5
df0[df0 == w] <- 5
df0[df0 == 'w'] <- 5
summary(df0)
df0 <- as.character(df0)
df0
df0[df0 == 'w'] <- 5
df0
df0 <- as.data.frame.matrix(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0 <- as.character(df0)
df0
df0 <- as.data.frame.matrix(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0
df0[df0 == 'w'] <- 5
df0
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0
print(df0)
df0[df0 == 'w'] <- 5
summary(df0)
df0 <- as.character(df0)
print(df0)
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0 <- as.character(df0)
print(df0)
df0[df0 == 'w'] <- 5
print(df0)
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0 <- as.character(df0)
print(df0)
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0 <- as.character(df0)
print(df0)
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0 <- as.character(df0)
df0
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0
print(df0)
summary(df0)
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
df0 <- as.character(df0)
print(df0)
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
oldvalues <- c("m", "d")
newvalues <- factor(c("3","1"))  # Make this a factor
print(df0)
df0 <- c("m", "d")
df0 <- factor(c("3","1"))  # Make this a factor
print(df0)
z1 <- recode(df0, "'d' = 2 ; 'm' = 3, 'w' = 10")
library(car)
install.packages("car")
library(car)
z1 <- recode(df0, "'d' = 2 ; 'm' = 3, 'w' = 10")
z1 <- recode(df0, "'d' = 2 ; 'm' = 3; 'w' = 10")
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
z1 <- recode(df0, "'d' = 2 ; 'm' = 3; 'w' = 10")
print(df0)
z1 <- recode(df0, "d = 2 ; 'm' = 3; 'w' = 10")
print(df0)
print(df0)
z1 <- recode(df0, "'d' = 2 ; 'm' = 3; 'w' = 10")
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
z1 <- lapply(z, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8"))
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8"))
z1
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8"))
z1
z1 <- as.dataframe(z1)
z1 <- data.frame(z1)
z1
library(car)
install.packages("car")
install.packages("car")
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
summary(z1)
z1 <- data.frame(as.numeric(z1))
df0 <- as.data.frame(replicate(10,sample(c("n","y","h","q","m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8", as.numeric.result = T))
z1 <- data.frame(z1)
summary(z1)
z1
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8", as.numeric.result = T))
z1 <- data.frame(z1)
summary(z1)
type(z1)
install.packages("Hmisc")
library(Hmisc)
describe(z1)
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
library(psych)
describe(z1)
z1
library(psych)
uninstall.packages("Hmisc")
describe(z1)
remove.packages("Hmisc")
library(psych)
describe(z1)
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8", as.numeric.result = T))
z1 <- data.frame(z1)
summary(z1)
library(psych)
describe(z1)
z1
describe(z1)
plot(z1)
hist(z1)
describe(z1)
describe(z1)
3/4
as.integer(3/4)
as.double(3/4)
as.integer(3/4)
summary(z1)
head(z1_)
head(z1)
z1 + 4
z2 <- as.numeric(z1)
z2 <- as.numeric(as.character(z1))
z2
as.double(3/4)
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8", as.numeric.result = T))
z1 <- data.frame(z1)
summary(z1)
library(psych)
describe(z1)
z1
summary(z1)
head(z1)
z2 <- as.numeric(as.character(z1))
z2
z2 <- as.matrix(z1)
z2
z2
describe(z2)
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8", as.numeric.result = T))
z1 <- as.matrix(z1)
summary(z1)
z2 <- as.numeric(as.character(z1))
z2
z2 <- (as.character(z1))
z2 <- (as.character(z1))
z2
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
POST <- read.csv("RAW POST - O&M.csv",header = TRUE,sep = ",",stringsAsFactors = FALSE)
df0 <- as.data.frame(replicate(10,sample(c("m","w","d"),20,replace = TRUE),simplify = "array"))
print(df0)
library(car)
z1 <- lapply(df0, FUN = function(foo) recode(foo, "'d' = 2 ; 'm' = 5 ; 'w' = 8", as.numeric.result = T, as.factor.result = F))
z1 <- data.frame(z1)
summary(z1)
z1 <- data.frame(z1)
summary(z1)
library(psych)
describe(z1)
z1
mean(2, 3, 4)
library(segmented)
options(scipen = 999)
library(segmented)
gold <- read.csv("100gold.csv", header = T)
setwd("C:/Users/Honey/Dropbox/MSDA/DATA 661 - Independent Study/DATA661")
gold <- read.csv("gold.csv", header = T)
gold <- read.csv("./gold.csv", header = T)
library(segmented)
options(scipen = 999)
gold <- read.csv("./gold.csv", header = T)
head(gold)
str(gold)
df0 <- gold[c("OAT", "Elec")]
plot(df0)
#### Clusters
df0 <- gold[c("OAT", "Elec")]
plot(df0)
carpet(gold)
library(graphics)
carpet(gold)
rug(gold)
rug(df0)
df0
heatmap(df0)
heatmap(gold)
heatmap(elec)
ggplot(df0, aes(OAT, Elec, color=OAT)) + geom_point()
# https://www.r-bloggers.com/r-for-ecologists-putting-together-a-piecewise-regression/
####
library(segmented)
options(scipen = 999)
gold <- read.csv("gold.csv", header = T)
head(gold)
str(gold)
df0 <- gold[c("OAT", "Elec")]
plot(df0)
#### Clusters
df0 <- gold[c("OAT", "Elec")]
plot(df0)
library(ggplot2)
ggplot(df0, aes(OAT, Elec, color=OAT)) + geom_point()
ggplot(df0, aes(OAT, Elec, color=OAT)) + geom_point() + theme_bw
ggplot(df0, aes(OAT, Elec, color=OAT)) + geom_point() + theme_bw()
# Divide OATs into clusters
(kc <- kmeans(df0, 2))
table(df0$OAT, kc$cluster)
set.seed(7)
km1 = kmeans(df0, 2, nstart=100)
# Plot results
plot(df0, col =(km1$cluster +1) , main="K-Means result with 2 clusters", pch=20, cex=2)
gold <- read.csv("interval.csv", header = T)
head(gold)
str(gold)
df0 <- gold[c("OAT", "Elec")]
gold <- read.csv("gold.csv", header = T)
head(gold)
str(gold)
df0 <- gold[c("OAT", "Elec")]
plot(df0)
#### Clusters
df0 <- gold[c("OAT", "Elec")]
plot(df0)
library(ggplot2)
ggplot(df0, aes(OAT, Elec, color=OAT)) + geom_point() + theme_bw
ggplot(df0, aes(OAT, Elec, color=OAT)) + geom_point() + theme_bw()
# Divide OATs into clusters
(kc <- kmeans(df0, 2))
table(df0$OAT, kc$cluster)
# Perform K-Means with 2 clusters
set.seed(7)
km1 = kmeans(df0, 2, nstart=100)
# Plot results
plot(df0, col =(km1$cluster +1) , main="K-Means result with 2 clusters", pch=20, cex=2)
# Check for the optimal number of clusters given the data
mydata <- df0
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method",
pch=20, cex=2)
# Perform K-Means with the optimal number of clusters identified from the Elbow method
set.seed(7)
km2 = kmeans(df0, 3, nstart=100)
# Examine the result of the clustering algorithm
km2
install.packages("prophet")
library(prophet)
m = Prophet()
library(prophet)
m = Prophet()
m <- Prophet()
library(dplyr)
df <- read.csv('../examples/example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('../examples/example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('../example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
setwd("C:/Users/Honey/Dropbox/MSDA/DATA 661 - Independent Study/DATA661")
df <- read.csv('../example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
w
w
df <- read.csv('../example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
example_wp_peyton_manning.csv
df <- read.csv('example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_plot_components(m, forecast)
m.fit(df)
fit(df)
lm(df)
future = m.make_future_dataframe(periods=120, freq='m')
